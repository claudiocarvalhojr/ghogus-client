#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ghogus-client:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  // console.log('...start...');
  // const p1 = async() => new Promise((resolve, reject) => {
  //   // setTimeout(() => resolve('testando...'), 2000)
  //   resolve('testando...')
  // })  
  // const p2 = p1()
  // p2.then(string => console.log(string + ' bla bla bla'))
  // console.log('...end...')

  // const fnAtrasada = async() => new Promise(res => {
  //   setTimeout(() => res('Olá'), 2000)
  // })
  // const fn = async(nome) => {
  //   const saudacao = await fnAtrasada()
  //   console.log('Função iniciada...')
  //   return `${saudacao} ${nome}!`;
  // }  
  // fn('Ana').then(string => console.log(string));

  function imprimir() {
    console.log('teste de async/await...')
  }

  function executar() {
    return new Promise(resolve => setTimeout(() => resolve(imprimir()), 2000))
  }

  function executar2() {
    return new Promise(resolve => resolve(imprimir()))
  }

  async function getProduct() {
    await executar2()
  }

  async function cartManager() {
    console.log('antes do start...')
    await getProduct()
    console.log('...depois do start')
  }

  cartManager()

  async function sleep(forHowLong) {
    function timeout(ms) {
      return new Promise(resolve => setTimeout(resolve, ms))
    }
    await timeout(forHowLong)
  }

  async function countFromThree() {
    await sleep(0)
    console.log(3)
    await sleep(1000)
    console.log(2)
    await sleep(1000)
    console.log(1)
    await sleep(1000)
    console.log('DONE')
  }

  // countFromThree()

}
