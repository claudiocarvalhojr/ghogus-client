#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ghogus-client:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  // const fnAtrasada = async() => new Promise(res => {
  //   setTimeout(() => res('Olá'), 2000)
  // })
  // const fn = async(nome) => {
  //   const saudacao = await fnAtrasada()
  //   console.log('Função iniciada...')
  //   return `${saudacao} ${nome}!`;
  // }  
  // fn('Ana').then(string => console.log(string));

  function imprimir() {
    console.log('...teste de async/await...')
  }

  async function executar() {
    let promise = new Promise(resolve => setTimeout(() => resolve(imprimir()), 1000))
    return promise
  }

  // function executar2() {
  //   return new Promise(resolve => resolve(imprimir()))
  // }

  // async function getProduct() {
  //   await executar()
  // }

  async function getProduct() {
    return new Promise(resolve => setTimeout(() => resolve(imprimir()), 1000))
  }

  function listProducts() {
    const fetch = require('node-fetch')
    return fetch('http://localhost:3000/products')
      .then(checkStatus)
      .then(res => res.json())
      .catch(err => console.error('ERROR: ' + err))
  }

  async function getProduct2() {
    const fetch = require('node-fetch')
    // return new Promise(resolve => resolve(listProducts()))
    return new Promise(resolve => resolve(
      fetch('http://localhost:3000/products')
        .then(checkStatus)
        .then(res => res.json())
        .catch(err => console.error('ERROR: ' + err))
    ))
  }

  async function getProduct3() {
    let json = { id: 123, title: 'testando promises' }
    return json
  }

  async function cartManager() {
    console.log('start...')
    // await getProduct()
    let products = await getProduct2()
    products.forEach(function (product) {
      console.log(product.sku)
    })
    // console.log('id: ' + product.id + ' | title: ' + product.title)
    // const promise = Promise.resolve(getProduct3())
    // promise.then(val => console.log(val.id))
    console.log('...end')
  }

  // cartManager()

  // async function sleep(forHowLong) {
  //   function timeout(ms) {
  //     return new Promise(resolve => setTimeout(resolve, ms))
  //   }
  //   await timeout(forHowLong)
  // }
  // async function countFromThree() {
  //   await sleep(0)
  //   console.log(3)
  //   await sleep(1000)
  //   console.log(2)
  //   await sleep(1000)
  //   console.log(1)
  //   await sleep(1000)
  //   console.log('DONE')
  // }
  // countFromThree()

  function checkStatus(res) {
    // console.log('CODE: ' + res.status + ', TEXT: ' + res.statusText)
    if (res.ok)
      return res
  }
  // const fetch = require('node-fetch')
  // fetch('http://localhost:3000/products')
  //   .then(checkStatus)
  //   .then(res => res.json())
  //   .then(products => {
  //     products.forEach(function (product) {
  //       console.log(product.sku)
  //     })
  //   })
  //   .catch(err => console.error('ERROR: ' + err))

}
